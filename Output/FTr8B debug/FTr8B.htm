<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\FTr8B debug\FTr8B.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\FTr8B debug\FTr8B.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Nov 13 14:03:58 2024
<BR><P>
<H3>Maximum Stack Usage =        416 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TRA_BindCallback &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[a8]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[15]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">NMI_Handler</a><BR>
 <LI><a href="#[16]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">HardFault_Handler</a><BR>
 <LI><a href="#[17]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">SVC_Handler</a><BR>
 <LI><a href="#[18]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">PendSV_Handler</a><BR>
 <LI><a href="#[19]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">SysTick_Handler</a><BR>
 <LI><a href="#[24]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[23]">DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</a> from spi sx1280.o(i.DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[21]">DMA1_Channel1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[22]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1e]">EXTI0_1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1f]">EXTI2_3_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[20]">EXTI4_15_IRQHandler</a> from main.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2f]">I2C2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[37]">IB1D_CommandReceivedCallback</a> from i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback) referenced from i-bus 1 device library.o(.text.IB1DTIM_TimerIRQHandler)
 <LI><a href="#[37]">IB1D_CommandReceivedCallback</a> from i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback) referenced from i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback)
 <LI><a href="#[37]">IB1D_CommandReceivedCallback</a> from i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback) referenced from i-bus 1 device library.o(.text.IB1D_Init)
 <LI><a href="#[37]">IB1D_CommandReceivedCallback</a> from i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback) referenced from i-bus 1 device library.o(.text.IB1D_MsIRQHandler)
 <LI><a href="#[38]">IB1_ReceiveSensorCallback</a> from npt i-bus 1.o(.text.IB1_ReceiveSensorCallback) referenced from npt i-bus 1.o(.text.IB1_ReceiveSensorIRQHandler)
 <LI><a href="#[3c]">IB1_ReceiveSensorIRQHandler</a> from npt i-bus 1.o(.text.IB1_ReceiveSensorIRQHandler) referenced from npt i-bus 1.o(.text.IB1_TimerCompareCallback)
 <LI><a href="#[39]">IB1_ReceiveServoCallback</a> from npt i-bus 1.o(.text.IB1_ReceiveServoCallback) referenced from npt i-bus 1.o(.text.IB1_ReceiveServoIRQHandler)
 <LI><a href="#[3b]">IB1_ReceiveServoIRQHandler</a> from npt i-bus 1.o(.text.IB1_ReceiveServoIRQHandler) referenced from npt i-bus 1.o(.text.IB1_TimerCompareCallback)
 <LI><a href="#[3d]">IB1_TimerCompareCallback</a> from npt i-bus 1.o(.text.IB1_TimerCompareCallback) referenced from npt i-bus 1.o(.text.IB1_TimerCompareIRQHandler)
 <LI><a href="#[3a]">IB1_TimerCompareIRQHandler</a> from npt i-bus 1.o(.text.IB1_TimerCompareIRQHandler) referenced from npt i-bus 1.o(.text.IB1_SetChannels)
 <LI><a href="#[85]">IB2DTIM_Deinit</a> from pwm adapter.o(i.IB2DTIM_Deinit) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[86]">IB2DTIM_Init</a> from pwm adapter.o(i.IB2DTIM_Init) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[88]">IB2DTIM_SetNextIRQTime</a> from pwm adapter.o(i.IB2DTIM_SetNextIRQTime) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[89]">IB2DTIM_StartTimer</a> from pwm adapter.o(i.IB2DTIM_StartTimer) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8a]">IB2DTIM_StopTimer</a> from pwm adapter.o(i.IB2DTIM_StopTimer) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8b]">IB2DUSART_Deinit</a> from pwm adapter.o(i.IB2DUSART_Deinit) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8c]">IB2DUSART_Init</a> from pwm adapter.o(i.IB2DUSART_Init) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8d]">IB2DUSART_ReceiveSetup</a> from pwm adapter.o(i.IB2DUSART_ReceiveSetup) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8e]">IB2DUSART_ReceiveStart</a> from pwm adapter.o(i.IB2DUSART_ReceiveStart) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[8f]">IB2DUSART_ReceiveStop</a> from pwm adapter.o(i.IB2DUSART_ReceiveStop) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[90]">IB2DUSART_TransmitSetup</a> from pwm adapter.o(i.IB2DUSART_TransmitSetup) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[91]">IB2DUSART_TransmitStart</a> from pwm adapter.o(i.IB2DUSART_TransmitStart) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[7e]">IB2D_GetParamCallback</a> from pwm adapter.o(i.IB2D_GetParamCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[80]">IB2D_GetValueCallback</a> from pwm adapter.o(i.IB2D_GetValueCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[41]">IB2D_ProcessChannelsCallback</a> from i-bus 2 device library.o(.text.IB2D_ProcessChannelsCallback) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
 <LI><a href="#[3f]">IB2D_ReceiveChannelsCallback</a> from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback) referenced from i-bus 2 device library.o(.text.IB2D_Init)
 <LI><a href="#[3f]">IB2D_ReceiveChannelsCallback</a> from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
 <LI><a href="#[3f]">IB2D_ReceiveChannelsCallback</a> from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallbackMedium)
 <LI><a href="#[3f]">IB2D_ReceiveChannelsCallback</a> from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback) referenced from i-bus 2 device library.o(.text.IB2D_RestartChannelsReceptionCallback)
 <LI><a href="#[40]">IB2D_ReceiveChannelsCallbackMedium</a> from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback)
 <LI><a href="#[42]">IB2D_ReceiveCommandCallback</a> from i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallback) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
 <LI><a href="#[43]">IB2D_ReceiveCommandCallbackMedium</a> from i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallbackMedium) referenced from i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallback)
 <LI><a href="#[81]">IB2D_RequiredResourcesCallback</a> from pwm adapter.o(i.IB2D_RequiredResourcesCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[3e]">IB2D_RestartChannelsReceptionCallback</a> from i-bus 2 device library.o(.text.IB2D_RestartChannelsReceptionCallback) referenced from i-bus 2 device library.o(.text.IB2DTIM_TimerIRQHandler)
 <LI><a href="#[82]">IB2D_SetChannelsCallback</a> from pwm adapter.o(i.IB2D_SetChannelsCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[83]">IB2D_SetChannelsTypeCallback</a> from pwm adapter.o(i.IB2D_SetChannelsTypeCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[84]">IB2D_SetFailsafeCallback</a> from pwm adapter.o(i.IB2D_SetFailsafeCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[7f]">IB2D_SetParamCallback</a> from pwm adapter.o(i.IB2D_SetParamCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[87]">IB2D_StatusChangedCallback</a> from pwm adapter.o(i.IB2D_StatusChangedCallback) referenced from pwm adapter.o(.constdata)
 <LI><a href="#[46]">IB2_CallGetParamResponseCallback</a> from npt i-bus 2.o(.text.IB2_CallGetParamResponseCallback) referenced from npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback)
 <LI><a href="#[45]">IB2_CallSetParamResponseCallback</a> from npt i-bus 2.o(.text.IB2_CallSetParamResponseCallback) referenced from npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback)
 <LI><a href="#[4b]">IB2_ProcessLastResponseCallback</a> from npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback) referenced from npt i-bus 2.o(.text.IB2_TimerCompareIRQHandler)
 <LI><a href="#[48]">IB2_SendChannelsCallback</a> from npt i-bus 2.o(.text.IB2_SendChannelsCallback) referenced from npt i-bus 2.o(.text.IB2_SendChannelsIRQHandler)
 <LI><a href="#[4a]">IB2_SendChannelsIRQHandler</a> from npt i-bus 2.o(.text.IB2_SendChannelsIRQHandler) referenced from npt i-bus 2.o(.text.IB2_SetChannels)
 <LI><a href="#[49]">IB2_SendCommandCallback</a> from npt i-bus 2.o(.text.IB2_SendCommandCallback) referenced from npt i-bus 2.o(.text.IB2_SendCommandIRQHandler)
 <LI><a href="#[47]">IB2_SendCommandIRQHandler</a> from npt i-bus 2.o(.text.IB2_SendCommandIRQHandler) referenced from npt i-bus 2.o(.text.IB2_SendChannelsCallback)
 <LI><a href="#[44]">IB2_TimerCompareIRQHandler</a> from npt i-bus 2.o(.text.IB2_TimerCompareIRQHandler) referenced from npt i-bus 2.o(.text.IB2_HubInit)
 <LI><a href="#[44]">IB2_TimerCompareIRQHandler</a> from npt i-bus 2.o(.text.IB2_TimerCompareIRQHandler) referenced from npt i-bus 2.o(.text.IB2_Init)
 <LI><a href="#[58]">LNKTIM_TimerCompareIRQHandler</a> from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler) referenced from lnk afhds3 receiver.o(.text.LNK_Init)
 <LI><a href="#[75]">LNK_BindCallback</a> from tra afhds3.o(.text.LNK_BindCallback) referenced from tra afhds3.o(.text.TRA_Bind)
 <LI><a href="#[12]">LNK_BuildTXPacketCallback</a> from tra afhds3.o(.text.LNK_BuildTXPacketCallback) referenced 2 times from tra afhds3.o(.data.TRA_LinkRunUp)
 <LI><a href="#[55]">LNK_BuildTXPacketCallback</a> from lnk afhds3 receiver.o(.text.LNK_BuildTXPacketCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[55]">LNK_BuildTXPacketCallback</a> from lnk afhds3 receiver.o(.text.LNK_BuildTXPacketCallback) referenced from lnk afhds3 receiver.o(.text.LNK_CallBuildTXPacketCallback)
 <LI><a href="#[4e]">LNK_CallBlackBoxRXCallback</a> from lnk afhds3 receiver.o(.text.LNK_CallBlackBoxRXCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[4e]">LNK_CallBlackBoxRXCallback</a> from lnk afhds3 receiver.o(.text.LNK_CallBlackBoxRXCallback) referenced from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
 <LI><a href="#[57]">LNK_CallBlackBoxTXCallback</a> from lnk afhds3 receiver.o(.text.LNK_CallBlackBoxTXCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[56]">LNK_CallBuildTXPacketCallback</a> from lnk afhds3 receiver.o(.text.LNK_CallBuildTXPacketCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[53]">LNK_CallHeartbeatCallback</a> from lnk afhds3 receiver.o(.text.LNK_CallHeartbeatCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[51]">LNK_CallSuccessfullyBound</a> from lnk afhds3 receiver.o(.text.LNK_CallSuccessfullyBound) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[52]">LNK_FactoryMeasureRSSICallback</a> from lnk afhds3 receiver.o(.text.LNK_FactoryMeasureRSSICallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[c]">LNK_FactorySaveConfigCallback</a> from main.o(i.LNK_FactorySaveConfigCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[13]">LNK_HeartbeatCallback</a> from tra afhds3.o(.text.LNK_HeartbeatCallback) referenced 2 times from tra afhds3.o(.data.TRA_LinkRunUp)
 <LI><a href="#[4d]">LNK_HeartbeatCallback</a> from lnk afhds3 receiver.o(.text.LNK_HeartbeatCallback) referenced 2 times from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[4d]">LNK_HeartbeatCallback</a> from lnk afhds3 receiver.o(.text.LNK_HeartbeatCallback) referenced from lnk afhds3 receiver.o(.text.LNK_CallHeartbeatCallback)
 <LI><a href="#[4d]">LNK_HeartbeatCallback</a> from lnk afhds3 receiver.o(.text.LNK_HeartbeatCallback) referenced from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
 <LI><a href="#[11]">LNK_PacketReceivedCallback</a> from tra afhds3.o(.text.LNK_PacketReceivedCallback) referenced 2 times from tra afhds3.o(.data.TRA_LinkRunUp)
 <LI><a href="#[54]">LNK_PacketReceivedCallbackBind</a> from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackBind) referenced 2 times from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[4c]">LNK_PacketReceivedCallbackFactory</a> from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackFactory) referenced 2 times from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[50]">LNK_PacketReceivedCallbackRun</a> from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[59]">LNK_ProcessRXPacketBindCallback</a> from lnk afhds3 receiver.o(.text.LNK_ProcessRXPacketBindCallback) referenced from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackBind)
 <LI><a href="#[5a]">LNK_ProcessRXPacketRunCallback</a> from lnk afhds3 receiver.o(.text.LNK_ProcessRXPacketRunCallback) referenced from lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
 <LI><a href="#[4f]">LNK_SynchronizationLostCallback</a> from lnk afhds3 receiver.o(.text.LNK_SynchronizationLostCallback) referenced from lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
 <LI><a href="#[15]">NMI_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[5b]">PHY_RXCallback1</a> from phy sx1280.o(.text.PHY_RXCallback1) referenced from phy sx1280.o(.text.PHY_RX)
 <LI><a href="#[5c]">PHY_RXCallback2</a> from phy sx1280.o(.text.PHY_RXCallback2) referenced from phy sx1280.o(.text.PHY_RXCallback1)
 <LI><a href="#[5d]">PHY_RXCallback3</a> from phy sx1280.o(.text.PHY_RXCallback3) referenced from phy sx1280.o(.text.PHY_RXCallback2)
 <LI><a href="#[5e]">PHY_RXCallback4</a> from phy sx1280.o(.text.PHY_RXCallback4) referenced from phy sx1280.o(.text.PHY_RXCallback3)
 <LI><a href="#[5f]">PHY_ResumeRXCallback</a> from phy sx1280.o(.text.PHY_ResumeRXCallback) referenced from phy sx1280.o(.text.PHY_ResumeRX)
 <LI><a href="#[5f]">PHY_ResumeRXCallback</a> from phy sx1280.o(.text.PHY_ResumeRXCallback) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2)
 <LI><a href="#[5f]">PHY_ResumeRXCallback</a> from phy sx1280.o(.text.PHY_ResumeRXCallback) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback4)
 <LI><a href="#[61]">PHY_SX1280_ContinueResetAndInitCallback1</a> from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback1) referenced from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInit)
 <LI><a href="#[61]">PHY_SX1280_ContinueResetAndInitCallback1</a> from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback1) referenced from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback1)
 <LI><a href="#[60]">PHY_SX1280_ContinueResetAndInitCallback2</a> from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback2) referenced from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInit)
 <LI><a href="#[62]">PHY_SX1280_ContinueResetAndInitCallback3</a> from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback3) referenced from phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback2)
 <LI><a href="#[63]">PHY_SX1280_DIO1IRQHandlerCallback1</a> from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback1) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandler)
 <LI><a href="#[64]">PHY_SX1280_DIO1IRQHandlerCallback2</a> from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback1)
 <LI><a href="#[65]">PHY_SX1280_DIO1IRQHandlerCallback3</a> from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback3) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2)
 <LI><a href="#[66]">PHY_SX1280_DIO1IRQHandlerCallback4</a> from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback4) referenced from phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback3)
 <LI><a href="#[67]">PHY_TXCallback1</a> from phy sx1280.o(.text.PHY_TXCallback1) referenced from phy sx1280.o(.text.PHY_TX)
 <LI><a href="#[68]">PHY_TXCallback2</a> from phy sx1280.o(.text.PHY_TXCallback2) referenced from phy sx1280.o(.text.PHY_TXCallback1)
 <LI><a href="#[69]">PHY_TXCallback3</a> from phy sx1280.o(.text.PHY_TXCallback3) referenced from phy sx1280.o(.text.PHY_TXCallback2)
 <LI><a href="#[6a]">PHY_TXCallback4</a> from phy sx1280.o(.text.PHY_TXCallback4) referenced from phy sx1280.o(.text.PHY_TXCallback3)
 <LI><a href="#[6c]">PHY_TXCallback5</a> from phy sx1280.o(.text.PHY_TXCallback5) referenced from phy sx1280.o(.text.PHY_TXCallback4)
 <LI><a href="#[6b]">PHY_TXCallback6</a> from phy sx1280.o(.text.PHY_TXCallback6) referenced from phy sx1280.o(.text.PHY_TXCallback4)
 <LI><a href="#[6b]">PHY_TXCallback6</a> from phy sx1280.o(.text.PHY_TXCallback6) referenced from phy sx1280.o(.text.PHY_TXCallback5)
 <LI><a href="#[6e]">PPM_TimerCompareCallback</a> from npt ppm.o(.text.PPM_TimerCompareCallback) referenced from npt ppm.o(.text.PPM_TimerCompareIRQHandler)
 <LI><a href="#[6d]">PPM_TimerCompareIRQHandler</a> from npt ppm.o(.text.PPM_TimerCompareIRQHandler) referenced from npt ppm.o(.text.PPM_Init)
 <LI><a href="#[7b]">PWMA_CallPWMSetFrequency</a> from pwm adapter.o(i.PWMA_CallPWMSetFrequency) referenced from pwm adapter.o(i.IB2D_SetParamCallback)
 <LI><a href="#[7c]">PWMA_IBus1TimerIRQHandler</a> from pwm adapter.o(i.PWMA_IBus1TimerIRQHandler) referenced from pwm adapter.o(i.PWMA_Init)
 <LI><a href="#[7a]">PWMA_IBus2TimerIRQHandler</a> from pwm adapter.o(i.PWMA_IBus2TimerIRQHandler) referenced from pwm adapter.o(i.IB2DTIM_Init)
 <LI><a href="#[70]">PWM_TimerCompareCallback</a> from npt pwm.o(.text.PWM_TimerCompareCallback) referenced from npt pwm.o(.text.PWM_TimerCompareIRQHandler)
 <LI><a href="#[6f]">PWM_TimerCompareIRQHandler</a> from npt pwm.o(.text.PWM_TimerCompareIRQHandler) referenced from npt pwm.o(.text.PWM_Init)
 <LI><a href="#[18]">PendSV_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[1b]">RTC_TAMP_IRQHandler</a> from system.o(i.RTC_TAMP_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[72]">SB_TimerCompareCallback</a> from npt s-bus.o(.text.SB_TimerCompareCallback) referenced from npt s-bus.o(.text.SB_TimerCompareIRQHandler)
 <LI><a href="#[71]">SB_TimerCompareIRQHandler</a> from npt s-bus.o(.text.SB_TimerCompareIRQHandler) referenced from npt s-bus.o(.text.SB_SetChannels)
 <LI><a href="#[7d]">SES_BindCallback</a> from main.o(i.SES_BindCallback) referenced from main.o(.constdata)
 <LI><a href="#[a]">SES_BuildRealtimePacketCallback</a> from main.o(i.SES_BuildRealtimePacketCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[7]">SES_CommandReceivedCallback</a> from main.o(i.SES_CommandReceivedCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[b]">SES_HeartbeatCallback</a> from main.o(i.SES_HeartbeatCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[8]">SES_PreSetChannelsCallback</a> from main.o(i.SES_PreSetChannelsCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[5]">SES_RealtimePacketReceivedCallback</a> from main.o(i.SES_RealtimePacketReceivedCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[74]">SES_SendCommandCallback</a> from ses afhds3.o(.text.SES_SendCommandCallback) referenced from ses afhds3.o(.text.SES_SendCommand)
 <LI><a href="#[9]">SES_SetChannelsCallback</a> from main.o(i.SES_SetChannelsCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[9]">SES_SetChannelsCallback</a> from main.o(i.SES_SetChannelsCallback) referenced from main.o(i.SES_HeartbeatCallback)
 <LI><a href="#[6]">SES_WSDataReceivedCallback</a> from main.o(i.SES_WSDataReceivedCallback) referenced 2 times from main.o(.data)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[19]">SysTick_Handler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system.o(i.SystemInit) referenced from startup_stm32g070xx.o(.text)
 <LI><a href="#[2a]">TIM14_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2b]">TIM15_IRQHandler</a> from npt timer.o(i.TIM15_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2c]">TIM16_IRQHandler</a> from npt timer.o(i.TIM16_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[2d]">TIM17_IRQHandler</a> from lnk timer.o(i.TIM17_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[26]">TIM1_CC_IRQHandler</a> from npt timer.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from npt timer.o(i.TIM3_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[28]">TIM6_IRQHandler</a> from system.o(i.TIM6_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[29]">TIM7_IRQHandler</a> from startup_stm32g070xx.o(.text) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[73]">TRA_BindCallback</a> from ses afhds3.o(.text.TRA_BindCallback) referenced from ses afhds3.o(.text.SES_Bind)
 <LI><a href="#[f]">TRA_BuildRealtimePacketCallback</a> from ses afhds3.o(.text.TRA_BuildRealtimePacketCallback) referenced 2 times from ses afhds3.o(.data.SES_TransportRunUp)
 <LI><a href="#[10]">TRA_HeartbeatCallback</a> from ses afhds3.o(.text.TRA_HeartbeatCallback) referenced 2 times from ses afhds3.o(.data.SES_TransportRunUp)
 <LI><a href="#[d]">TRA_RealtimePacketReceivedCallback</a> from ses afhds3.o(.text.TRA_RealtimePacketReceivedCallback) referenced 2 times from ses afhds3.o(.data.SES_TransportRunUp)
 <LI><a href="#[76]">TRA_SendWSDataCallback</a> from tra afhds3.o(.text.TRA_SendWSDataCallback) referenced from tra afhds3.o(.text.TRA_SendWSData)
 <LI><a href="#[e]">TRA_WSDataReceivedCallback</a> from ses afhds3.o(.text.TRA_WSDataReceivedCallback) referenced 2 times from ses afhds3.o(.data.SES_TransportRunUp)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart new port.o(i.USART1_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from usart new port.o(i.USART2_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[34]">USART3_4_IRQHandler</a> from usart new port.o(i.USART3_4_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[77]">WS_DataReceivedCallback</a> from npt ws.o(.text.WS_DataReceivedCallback) referenced from npt ws.o(.text.WS_MsIRQHandler)
 <LI><a href="#[78]">WS_TransmitCallback</a> from npt ws.o(.text.WS_TransmitCallback) referenced from npt ws.o(.text.WS_SendData)
 <LI><a href="#[78]">WS_TransmitCallback</a> from npt ws.o(.text.WS_TransmitCallback) referenced from npt ws.o(.text.WS_TransmitIRQHandler)
 <LI><a href="#[79]">WS_TransmitIRQHandler</a> from npt ws.o(.text.WS_TransmitIRQHandler) referenced from npt ws.o(.text.WS_TransmitCallback)
 <LI><a href="#[1a]">WWDG_IRQHandler</a> from system.o(i.WWDG_IRQHandler) referenced from startup_stm32g070xx.o(RESET)
 <LI><a href="#[92]">__main</a> from __main.o(!!!main) referenced from startup_stm32g070xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[93]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[95]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[18b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[18c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[18d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[99]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[18e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[190]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[191]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[192]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[193]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[194]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[195]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[196]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[197]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[198]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[199]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[19b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[19c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[19d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[19e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[19f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1a0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[9e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1a4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1a5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1a6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1a7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1a8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[94]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1aa]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[96]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[98]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; APP_SES_Run &rArr; SES_Run &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ac]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[aa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[9f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g070xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g070xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[143]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParam
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetParamResponse
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannelsCallback
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetNextSensor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SendData
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_SetChannels
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_BuildRealtimePacketCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveChannelsCallbackMedium
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendWSData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_WSDataReceivedCallback
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_BindCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_SaveBoundConfig
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketBindCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackBind
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallback
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_BuildTXPacketCallback
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetNextSensor
</UL>

<P><STRONG><a name="[1af]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[a3]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackPWMFrequencies
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveCommandCallbackMedium
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_BuildTXPacketCallback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[1b0]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[15e]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadFactoryConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetParamCallback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_GetParamCallback
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveFactoryConfig
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetParamCallback
</UL>

<P><STRONG><a name="[1b3]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfigCalcTXRXTime
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFrequencies
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_HeartbeatCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run2
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SES_Run
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[9c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b9]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ba]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1bb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>IB1DTIM_TimerIRQHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, i-bus 1 device library.o(.text.IB1DTIM_TimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IB1DTIM_TimerIRQHandler &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_SetBufferState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_TransmitStart
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveSetup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StopTimer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_SetNextIRQTime
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_IBus1TimerIRQHandler
</UL>

<P><STRONG><a name="[b8]"></a>IB1D_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i-bus 1 device library.o(.text.IB1D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IB1D_Init &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_SetBufferState
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveSetup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
</UL>

<P><STRONG><a name="[b9]"></a>IB1D_MsIRQHandler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, i-bus 1 device library.o(.text.IB1D_MsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IB1D_MsIRQHandler &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_StatusChangedCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_SetBufferState
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveSetup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>IB1_GetNextSensor</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, npt i-bus 1.o(.text.IB1_GetNextSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB1_GetNextSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_BuildRealtimePacketCallback
</UL>

<P><STRONG><a name="[177]"></a>IB1_GetParam</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, npt i-bus 1.o(.text.IB1_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB1_GetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[be]"></a>IB1_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB1_Init &rArr; USART_NPT_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[c8]"></a>IB1_SetChannels</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IB1_SetChannels &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>

<P><STRONG><a name="[176]"></a>IB1_SetParam</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, npt i-bus 1.o(.text.IB1_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB1_SetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[cb]"></a>IB1_SetupServo</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_SetupServo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IB1_SetupServo &rArr; IB1_SetupServoResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetupServoResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[11a]"></a>IB1_StartDeinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, npt i-bus 1.o(.text.IB1_StartDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[d4]"></a>IB2DTIM_TimerIRQHandler</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2DTIM_TimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2DTIM_TimerIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_IBus2TimerIRQHandler
</UL>

<P><STRONG><a name="[173]"></a>IB2D_Init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, i-bus 2 device library.o(.text.IB2D_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IB2D_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
</UL>

<P><STRONG><a name="[182]"></a>IB2D_MsIRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2D_MsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2D_MsIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>IB2_FailsafeChanged</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, npt i-bus 2.o(.text.IB2_FailsafeChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2_FailsafeChanged
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_FailsafeChanged
</UL>

<P><STRONG><a name="[dc]"></a>IB2_GetNextSensor</STRONG> (Thumb, 928 bytes, Stack size 64 bytes, npt i-bus 2.o(.text.IB2_GetNextSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IB2_GetNextSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_BuildRealtimePacketCallback
</UL>

<P><STRONG><a name="[dd]"></a>IB2_GetParam</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, npt i-bus 2.o(.text.IB2_GetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IB2_GetParam &rArr; IB2_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetParamResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[de]"></a>IB2_HubInit</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, npt i-bus 2.o(.text.IB2_HubInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IB2_HubInit &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[df]"></a>IB2_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, npt i-bus 2.o(.text.IB2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB2_Init &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[e1]"></a>IB2_SetChannels</STRONG> (Thumb, 2396 bytes, Stack size 96 bytes, npt i-bus 2.o(.text.IB2_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_TriggerIRQ
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>

<P><STRONG><a name="[e4]"></a>IB2_SetParam</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, npt i-bus 2.o(.text.IB2_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IB2_SetParam &rArr; IB2_SetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParamResponse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[119]"></a>IB2_StartDeinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, npt i-bus 2.o(.text.IB2_StartDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[e7]"></a>IB_BuildRealtimePacketCallback</STRONG> (Thumb, 364 bytes, Stack size 72 bytes, npt i-bus common.o(.text.IB_BuildRealtimePacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IB_BuildRealtimePacketCallback &rArr; IB2_GetNextSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetNextSensor
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetNextSensor
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_BuildRealtimePacketCallback
</UL>

<P><STRONG><a name="[c2]"></a>IB_ResetSensors</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, npt i-bus common.o(.text.IB_ResetSensors))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
</UL>

<P><STRONG><a name="[f0]"></a>LNK_Bind</STRONG> (Thumb, 240 bytes, Stack size 128 bytes, lnk afhds3 receiver.o(.text.LNK_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LNK_Bind &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Bind
</UL>

<P><STRONG><a name="[f5]"></a>LNK_Factory</STRONG> (Thumb, 244 bytes, Stack size 128 bytes, lnk afhds3 receiver.o(.text.LNK_Factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LNK_Factory &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Factory
</UL>

<P><STRONG><a name="[14c]"></a>LNK_GetLastRXConditions</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lnk afhds3 receiver.o(.text.LNK_GetLastRXConditions))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
</UL>

<P><STRONG><a name="[13f]"></a>LNK_GetRFPower</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lnk afhds3 receiver.o(.text.LNK_GetRFPower))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[f4]"></a>LNK_Idle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lnk afhds3 receiver.o(.text.LNK_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LNK_Idle &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallback
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_HeartbeatCallback
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_BindCallback
</UL>

<P><STRONG><a name="[f8]"></a>LNK_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LNK_Init &rArr; PHY_Init &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Init
</UL>

<P><STRONG><a name="[102]"></a>LNK_Run</STRONG> (Thumb, 1040 bytes, Stack size 184 bytes, lnk afhds3 receiver.o(.text.LNK_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run2
</UL>

<P><STRONG><a name="[152]"></a>LNK_SetAntenna</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lnk afhds3 receiver.o(.text.LNK_SetAntenna))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SetAntenna
</UL>

<P><STRONG><a name="[13e]"></a>LNK_SetRFPower</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lnk afhds3 receiver.o(.text.LNK_SetRFPower))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[103]"></a>LNK_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LNK_Stop &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Test
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Stop
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Factory
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Bind
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run2
</UL>

<P><STRONG><a name="[104]"></a>LNK_Test</STRONG> (Thumb, 616 bytes, Stack size 144 bytes, lnk afhds3 receiver.o(.text.LNK_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LNK_Test &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Test
</UL>

<P><STRONG><a name="[105]"></a>NPT_BuildRealtimePacketCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, new port.o(.text.NPT_BuildRealtimePacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NPT_BuildRealtimePacketCallback &rArr; IB_BuildRealtimePacketCallback &rArr; IB2_GetNextSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_BuildRealtimePacketCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BuildRealtimePacketCallback
</UL>

<P><STRONG><a name="[106]"></a>NPT_FailsafeChanged</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new port.o(.text.NPT_FailsafeChanged))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NPT_FailsafeChanged &rArr; IB2_FailsafeChanged
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_FailsafeChanged
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[107]"></a>NPT_Init</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, new port.o(.text.NPT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = NPT_Init &rArr; IB2_HubInit &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_HubInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StartNewPort
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[10c]"></a>NPT_MsIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, new port.o(.text.NPT_MsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NPT_MsIRQHandler &rArr; WS_MsIRQHandler &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_MsIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>NPT_SetChannels</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, new port.o(.text.NPT_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = NPT_SetChannels &rArr; IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SetChannels
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_SetChannels
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannelsCallback
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_ServoOutCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetChannelsCallback
</UL>

<P><STRONG><a name="[112]"></a>NPT_SetPWMFrequencies</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, new port.o(.text.NPT_SetPWMFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NPT_SetPWMFrequencies &rArr; PWM_SetFrequencies
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFrequencies
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_CallPWMSetFrequency
</UL>

<P><STRONG><a name="[114]"></a>NPT_SetWSUSARTConfig</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, new port.o(.text.NPT_SetWSUSARTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = NPT_SetWSUSARTConfig &rArr; WS_SetUSARTConfig &rArr; WS_Init &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SetUSARTConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[116]"></a>NPT_StartDeinit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, new port.o(.text.NPT_StartDeinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NPT_StartDeinit &rArr; WS_Deinit &rArr; USART_NPT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Deinit
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_StartDeinit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_StartDeinit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_StartDeinit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_StartDeinit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_StartDeinit
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[11d]"></a>NPT_WSDataReceivedCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, new port.o(.text.NPT_WSDataReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NPT_WSDataReceivedCallback &rArr; WS_SendData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_WSDataReceivedCallback
</UL>

<P><STRONG><a name="[f6]"></a>PHY_GetInstantRSSI</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, phy sx1280.o(.text.PHY_GetInstantRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PHY_GetInstantRSSI &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_FactoryMeasureRSSICallback
</UL>

<P><STRONG><a name="[101]"></a>PHY_GetLastRXConditions</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_GetLastRXConditions))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PHY_GetLastRXConditions
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketRunCallback
</UL>

<P><STRONG><a name="[f9]"></a>PHY_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, phy sx1280.o(.text.PHY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PHY_Init &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_SetResetPin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_IsBusy
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Init
</UL>

<P><STRONG><a name="[ef]"></a>PHY_RX</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, phy sx1280.o(.text.PHY_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PHY_RX &rArr; PHY_SX1280_ContinueResetAndInit &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_SetResetPin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_IsBusy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>PHY_ResumeRX</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_ResumeRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_ResumeRX &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackBind
</UL>

<P><STRONG><a name="[127]"></a>PHY_SX1280_DIO1IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_DIO1IRQHandler &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetTimeMarker
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>PHY_SetConfig</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, phy sx1280.o(.text.PHY_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfigCalcTXRXTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Factory
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
</UL>

<P><STRONG><a name="[ea]"></a>PHY_Stop</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, phy sx1280.o(.text.PHY_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Factory
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketBindCallback
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackBind
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_CallSuccessfullyBound
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>PHY_TX</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, phy sx1280.o(.text.PHY_TX))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PHY_TX &rArr; PHY_SX1280_ContinueResetAndInit &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_SetResetPin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_IsBusy
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetSimpleRandomNumber
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>PHY_TimerCompareIRQHandler</STRONG> (Thumb, 1292 bytes, Stack size 32 bytes, phy sx1280.o(.text.PHY_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PHY_TimerCompareIRQHandler &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransferWait
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[109]"></a>PPM_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, npt ppm.o(.text.PPM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PPM_Init &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[110]"></a>PPM_SetChannels</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, npt ppm.o(.text.PPM_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PPM_SetChannels &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>

<P><STRONG><a name="[11b]"></a>PPM_StartDeinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, npt ppm.o(.text.PPM_StartDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[108]"></a>PWM_Init</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, npt pwm.o(.text.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PWM_Init &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[10f]"></a>PWM_SetChannels</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, npt pwm.o(.text.PWM_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWM_SetChannels &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQCounter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_GetCounter
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>

<P><STRONG><a name="[113]"></a>PWM_SetFrequencies</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, npt pwm.o(.text.PWM_SetFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_SetFrequencies
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetPWMFrequencies
</UL>

<P><STRONG><a name="[11c]"></a>PWM_StartDeinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, npt pwm.o(.text.PWM_StartDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[10a]"></a>SB_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, npt s-bus.o(.text.SB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SB_Init &rArr; USART_NPT_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>

<P><STRONG><a name="[111]"></a>SB_SetChannels</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, npt s-bus.o(.text.SB_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SB_SetChannels &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>

<P><STRONG><a name="[118]"></a>SB_StartDeinit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, npt s-bus.o(.text.SB_StartDeinit))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[12f]"></a>SES_Bind</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ses afhds3.o(.text.SES_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SES_Bind &rArr; TRA_Bind &rArr; LNK_Bind &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Bind
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Bind
</UL>

<P><STRONG><a name="[132]"></a>SES_Factory</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ses afhds3.o(.text.SES_Factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SES_Factory &rArr; TRA_Factory &rArr; LNK_Factory &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Stop
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Factory
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
</UL>

<P><STRONG><a name="[134]"></a>SES_GetRFCycleTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_GetRFCycleTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SES_GetRFCycleTime
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_GetRFCycleTime
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SES_Run
</UL>

<P><STRONG><a name="[136]"></a>SES_Idle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SES_Idle &rArr; TRA_Idle &rArr; LNK_Idle &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
</UL>

<P><STRONG><a name="[138]"></a>SES_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SES_Init &rArr; TRA_Init &rArr; LNK_Init &rArr; PHY_Init &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>SES_IsWSIdle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_IsWSIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SES_IsWSIdle
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_IsWSIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[17f]"></a>SES_MsIRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_MsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SES_MsIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>SES_PackChannels</STRONG> (Thumb, 312 bytes, Stack size 60 bytes, afhds3 rc channels packing library.o(.text.SES_PackChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SES_PackChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
</UL>

<P><STRONG><a name="[141]"></a>SES_PackOneChannel</STRONG> (Thumb, 336 bytes, Stack size 28 bytes, afhds3 rc channels packing library.o(.text.SES_PackOneChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SES_PackOneChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_BindCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[13c]"></a>SES_PackPWMFrequencies</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, afhds3 pwm frequencies packing library.o(.text.SES_PackPWMFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SES_PackPWMFrequencies
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveConfig
</UL>

<P><STRONG><a name="[144]"></a>SES_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ses afhds3.o(.text.SES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SES_Run &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SES_Run
</UL>

<P><STRONG><a name="[147]"></a>SES_SendCommand</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, ses afhds3.o(.text.SES_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SES_SendCommand &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_RealtimePacketReceivedCallback
</UL>

<P><STRONG><a name="[149]"></a>SES_SendResponse</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, ses afhds3.o(.text.SES_SendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParamResponse
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetParamResponse
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetupServoResponse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetParamResponse
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetParamResponse
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallbackNotSupported
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallbackInvalid
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_WSDataReceivedCallback
</UL>

<P><STRONG><a name="[14a]"></a>SES_SendWSData</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, ses afhds3.o(.text.SES_SendWSData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SES_SendWSData &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_DataReceivedCallback
</UL>

<P><STRONG><a name="[14e]"></a>SES_Test</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ses afhds3.o(.text.SES_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SES_Test &rArr; TRA_Test &rArr; LNK_Test &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Test
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[142]"></a>SES_UnpackChannels</STRONG> (Thumb, 252 bytes, Stack size 44 bytes, afhds3 rc channels packing library.o(.text.SES_UnpackChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SES_UnpackChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetFailsafeUnpack
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetChannelsCallback
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_BindCallback
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[15c]"></a>SES_UnpackPWMFrequencies</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, afhds3 pwm frequencies packing library.o(.text.SES_UnpackPWMFrequencies))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SES_UnpackPWMFrequencies
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadConfig
</UL>

<P><STRONG><a name="[129]"></a>SYS_CalcCRC32Table</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, afhds3 crc library.o(.text.SYS_CalcCRC32Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_CalcCRC32Table
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveFactoryConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadFactoryConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
</UL>

<P><STRONG><a name="[d5]"></a>SYS_CalcCRC8Table</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, afhds3 crc library.o(.text.SYS_CalcCRC8Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_CalcCRC8Table
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveCommandCallbackMedium
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveChannelsCallbackMedium
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendWSData
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_WSDataReceivedCallback
</UL>

<P><STRONG><a name="[12b]"></a>SYS_GetSimpleRandomNumber</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, afhds3 simple random number library.o(.text.SYS_GetSimpleRandomNumber))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
</UL>

<P><STRONG><a name="[187]"></a>SYS_LowPriorityIRQCallback</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, afhds3 queue low priority irq library.o(.text.SYS_LowPriorityIRQCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_LowPriorityIRQCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>SYS_MediumPriorityIRQCallback</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, afhds3 queue medium priority irq library.o(.text.SYS_MediumPriorityIRQCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_MediumPriorityIRQCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TAMP_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>SYS_QueueLowPriorityIRQCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, afhds3 queue low priority irq library.o(.text.SYS_QueueLowPriorityIRQCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerLowPriorityCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_HeartbeatCallback
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetParamCallback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SendData
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_MsIRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveChannelsCallbackMedium
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackBind
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_CallBuildTXPacketCallback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_TransmitIRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>SYS_QueueLowPriorityIRQCallbackLast</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, afhds3 queue low priority irq library.o(.text.SYS_QueueLowPriorityIRQCallbackLast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_QueueLowPriorityIRQCallbackLast &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerLowPriorityCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_CallHeartbeatCallback
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>SYS_QueueMediumPriorityIRQCallback</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, afhds3 queue medium priority irq library.o(.text.SYS_QueueMediumPriorityIRQCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerMediumPriorityCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_TimerIRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SendCommandIRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SendChannelsIRQHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveServoIRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveSensorIRQHandler
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveCommandCallback
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_ReceiveChannelsCallback
</UL>

<P><STRONG><a name="[d3]"></a>SYS_QueueMediumPriorityIRQCallbackLast</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, afhds3 queue medium priority irq library.o(.text.SYS_QueueMediumPriorityIRQCallbackLast))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYS_QueueMediumPriorityIRQCallbackLast &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerMediumPriorityCallback
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareIRQHandler
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TimerCompareIRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_TimerCompareIRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[131]"></a>TRA_Bind</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tra afhds3.o(.text.TRA_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TRA_Bind &rArr; LNK_Bind &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Bind
</UL>

<P><STRONG><a name="[133]"></a>TRA_Factory</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tra afhds3.o(.text.TRA_Factory))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TRA_Factory &rArr; LNK_Factory &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Factory
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Factory
</UL>

<P><STRONG><a name="[135]"></a>TRA_GetRFCycleTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tra afhds3.o(.text.TRA_GetRFCycleTime))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_GetRFCycleTime
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
</UL>

<P><STRONG><a name="[137]"></a>TRA_Idle</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TRA_Idle &rArr; LNK_Idle &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Idle
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_HeartbeatCallback
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_BindCallback
</UL>

<P><STRONG><a name="[139]"></a>TRA_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TRA_Init &rArr; LNK_Init &rArr; PHY_Init &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Init
</UL>

<P><STRONG><a name="[13b]"></a>TRA_IsWSIdle</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tra afhds3.o(.text.TRA_IsWSIdle))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_IsWSIdle
</UL>

<P><STRONG><a name="[146]"></a>TRA_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run2
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
</UL>

<P><STRONG><a name="[148]"></a>TRA_SendWSData</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, tra afhds3.o(.text.TRA_SendWSData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendWSData
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSDataCallback
</UL>

<P><STRONG><a name="[140]"></a>TRA_SetAntenna</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_SetAntenna))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRA_SetAntenna
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_SetAntenna
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>

<P><STRONG><a name="[130]"></a>TRA_Stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TRA_Stop &rArr; LNK_Stop &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Test
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Factory
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Bind
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
</UL>

<P><STRONG><a name="[14f]"></a>TRA_Test</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tra afhds3.o(.text.TRA_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TRA_Test &rArr; LNK_Test &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Test
</UL>

<P><STRONG><a name="[117]"></a>WS_Deinit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, npt ws.o(.text.WS_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WS_Deinit &rArr; USART_NPT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
</UL>

<P><STRONG><a name="[10b]"></a>WS_Init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, npt ws.o(.text.WS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WS_Init &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SetUSARTConfig
</UL>

<P><STRONG><a name="[10d]"></a>WS_MsIRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, npt ws.o(.text.WS_MsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WS_MsIRQHandler &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_GetNbReceivedBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_MsIRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>WS_SendData</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, npt ws.o(.text.WS_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WS_SendData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_WSDataReceivedCallback
</UL>

<P><STRONG><a name="[115]"></a>WS_SetUSARTConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, npt ws.o(.text.WS_SetUSARTConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WS_SetUSARTConfig &rArr; WS_Init &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetWSUSARTConfig
</UL>

<P><STRONG><a name="[ff]"></a>ADC_GetExternalVoltage</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, adc.o(i.ADC_GetExternalVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
</UL>

<P><STRONG><a name="[fe]"></a>ADC_GetInternalVoltage</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, adc.o(i.ADC_GetInternalVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_GetValueCallback
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_GetValueCallback
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
</UL>

<P><STRONG><a name="[153]"></a>ADC_Init</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>ADC_MsIRQHandler</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, adc.o(i.ADC_MsIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>APP_SaveConfig</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, main.o(i.APP_SaveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_SaveConfig &rArr; EEPROM_Write &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackPWMFrequencies
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Activate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[23]"></a>DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, spi sx1280.o(i.DMA1_Ch4_7_DMAMUX1_OVR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>EEPROM_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eeprom.o(i.EEPROM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>EEPROM_Read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, eeprom.o(i.EEPROM_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EEPROM_Read &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadFactoryConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadConfig
</UL>

<P><STRONG><a name="[161]"></a>EEPROM_Write</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, eeprom.o(i.EEPROM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = EEPROM_Write &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveFactoryConfig
</UL>

<P><STRONG><a name="[20]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EXTI4_15_IRQHandler &rArr; PHY_SX1280_DIO1IRQHandler &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SX1280_BusyIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>I2C_Init</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, i2c.o(i.I2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>I2C_Read</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, i2c.o(i.I2C_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Read &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>

<P><STRONG><a name="[167]"></a>I2C_Transfer</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, i2c.o(i.I2C_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
</UL>

<P><STRONG><a name="[164]"></a>I2C_Write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, i2c.o(i.I2C_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
</UL>

<P><STRONG><a name="[b1]"></a>IB1DTIM_SetNextIRQTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm adapter.o(i.IB1DTIM_SetNextIRQTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IB1DTIM_SetNextIRQTime &rArr; NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
</UL>

<P><STRONG><a name="[b2]"></a>IB1DTIM_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm adapter.o(i.IB1DTIM_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB1DTIM_StartTimer &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[ac]"></a>IB1DTIM_StopTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB1DTIM_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IB1DTIM_StopTimer &rArr; NPTTIM_FreezeCompareIRQ &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[ae]"></a>IB1DUSART_ReceiveSetup</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, pwm adapter.o(i.IB1DUSART_ReceiveSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[af]"></a>IB1DUSART_ReceiveStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB1DUSART_ReceiveStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IB1DUSART_ReceiveStart &rArr; USART_NPT_ReceiveStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b7]"></a>IB1DUSART_TransmitSetup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm adapter.o(i.IB1DUSART_TransmitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB1DUSART_TransmitSetup &rArr; USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b0]"></a>IB1DUSART_TransmitStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB1DUSART_TransmitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB1DUSART_TransmitStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>IB1D_GetParamCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pwm adapter.o(i.IB1D_GetParamCallback))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b3]"></a>IB1D_GetValueCallback</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pwm adapter.o(i.IB1D_GetValueCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IB1D_GetValueCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInternalVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b5]"></a>IB1D_ServoOutCallback</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, pwm adapter.o(i.IB1D_ServoOutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IB1D_ServoOutCallback &rArr; NPT_SetChannels &rArr; IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[ad]"></a>IB1D_SetBufferState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm adapter.o(i.IB1D_SetBufferState))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b6]"></a>IB1D_SetParamCallback</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, pwm adapter.o(i.IB1D_SetParamCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IB1D_SetParamCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_CommandReceivedCallback
</UL>

<P><STRONG><a name="[ba]"></a>IB1D_StatusChangedCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, pwm adapter.o(i.IB1D_StatusChangedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB1D_StatusChangedCallback &rArr; LED_SetPattern &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>IB1_GetParamResponse</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main.o(i.IB1_GetParamResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = IB1_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
</UL>

<P><STRONG><a name="[c4]"></a>IB1_SetParamResponse</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.IB1_SetParamResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IB1_SetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
</UL>

<P><STRONG><a name="[cc]"></a>IB1_SetupServoResponse</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, main.o(i.IB1_SetupServoResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IB1_SetupServoResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetupServo
</UL>

<P><STRONG><a name="[d7]"></a>IB2_GetParamResponse</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i.IB2_GetParamResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IB2_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetParam
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_CallGetParamResponseCallback
</UL>

<P><STRONG><a name="[d8]"></a>IB2_SetParamResponse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.IB2_SetParamResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IB2_SetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParam
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_CallSetParamResponseCallback
</UL>

<P><STRONG><a name="[16a]"></a>LED_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LED_Init &rArr; LED_SetPattern &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[181]"></a>LED_MsIRQHandler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, led.o(i.LED_MsIRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>LED_SetPattern</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(i.LED_SetPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LED_SetPattern &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Bind
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_StatusChangedCallback
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_StatusChangedCallback
</UL>

<P><STRONG><a name="[d2]"></a>LNKTIM_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lnk timer.o(i.LNKTIM_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
</UL>

<P><STRONG><a name="[fa]"></a>LNKTIM_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lnk timer.o(i.LNKTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LNKTIM_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Init
</UL>

<P><STRONG><a name="[ec]"></a>LNKTIM_SetNextCompareIRQTime</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lnk timer.o(i.LNKTIM_SetNextCompareIRQTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LNKTIM_SetNextCompareIRQTime
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
</UL>

<P><STRONG><a name="[fc]"></a>LNKTIM_SetNextCompareIRQTimeFromMarker</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lnk timer.o(i.LNKTIM_SetNextCompareIRQTimeFromMarker))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LNKTIM_SetNextCompareIRQTimeFromMarker
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackRun
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackFactory
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackBind
</UL>

<P><STRONG><a name="[16c]"></a>LNKTIM_SetNextCompareIRQTimeInternal</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, lnk timer.o(i.LNKTIM_SetNextCompareIRQTimeInternal))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeFromMarker
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTime
</UL>

<P><STRONG><a name="[128]"></a>LNKTIM_SetTimeMarker</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lnk timer.o(i.LNKTIM_SetTimeMarker))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>LNKTIM_StartTimer</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, lnk timer.o(i.LNKTIM_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LNKTIM_StartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Factory
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketBindCallback
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_CallSuccessfullyBound
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>LNKTIM_StopTimer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lnk timer.o(i.LNKTIM_StopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Test
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Factory
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Bind
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketBindCallback
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_CallSuccessfullyBound
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>NPTTIM_DisableChannel</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, npt timer.o(i.NPTTIM_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NPTTIM_DisableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_SetChannels
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[c9]"></a>NPTTIM_EnableChannel</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, npt timer.o(i.NPTTIM_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SetChannels
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_HubInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetChannels
</UL>

<P><STRONG><a name="[e5]"></a>NPTTIM_FreezeCompareIRQ</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, npt timer.o(i.NPTTIM_FreezeCompareIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NPTTIM_FreezeCompareIRQ &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StopTimer
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_StopTimer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TimerCompareCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_TimerCompareCallback
</UL>

<P><STRONG><a name="[12d]"></a>NPTTIM_GetCounter</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, npt timer.o(i.NPTTIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NPTTIM_GetCounter &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
</UL>

<P><STRONG><a name="[16e]"></a>NPTTIM_Init</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, npt timer.o(i.NPTTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NPTTIM_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12e]"></a>NPTTIM_SetNextCompareIRQCounter</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, npt timer.o(i.NPTTIM_SetNextCompareIRQCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NPTTIM_SetNextCompareIRQCounter &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
</UL>

<P><STRONG><a name="[cf]"></a>NPTTIM_SetNextCompareIRQTime</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, npt timer.o(i.NPTTIM_SetNextCompareIRQTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_SetNextIRQTime
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_SetNextIRQTime
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_TimerCompareCallback
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_TimerCompareCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[ca]"></a>NPTTIM_SetNextCompareIRQTimeFromNow</STRONG> (Thumb, 422 bytes, Stack size 40 bytes, npt timer.o(i.NPTTIM_SetNextCompareIRQTimeFromNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StartTimer
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_StartTimer
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SendChannelsIRQHandler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_SetChannels
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetChannels
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPM_SetChannels
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetChannels
</UL>

<P><STRONG><a name="[170]"></a>NPTTIM_SetNextCompareIRQTimeInternal</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, npt timer.o(i.NPTTIM_SetNextCompareIRQTimeInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM15_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQCounter
</UL>

<P><STRONG><a name="[e3]"></a>NPTTIM_TriggerIRQ</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, npt timer.o(i.NPTTIM_TriggerIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NPTTIM_TriggerIRQ &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
</UL>

<P><STRONG><a name="[e2]"></a>NPT_GetInternalSensor</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, main.o(i.NPT_GetInternalSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_GetLastRXConditions
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInternalVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetExternalVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_BuildRealtimePacketCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
</UL>

<P><STRONG><a name="[122]"></a>PHY_SX1280_IsBusy</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.PHY_SX1280_IsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[120]"></a>PHY_SX1280_SetResetPin</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.PHY_SX1280_SetResetPin))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[125]"></a>PHY_SetAntenna</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.PHY_SetAntenna))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback3
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RXCallback2
</UL>

<P><STRONG><a name="[12c]"></a>PHY_SetAttenuator</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.PHY_SetAttenuator))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback2
</UL>

<P><STRONG><a name="[126]"></a>PHY_SetPAMode</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, main.o(i.PHY_SetPAMode))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback6
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ResumeRX
</UL>

<P><STRONG><a name="[171]"></a>PWMA_Activate</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, pwm adapter.o(i.PWMA_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PWMA_Activate &rArr; APP_SaveConfig &rArr; EEPROM_Write &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>PWMA_CallPWMSetFrequency</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.PWMA_CallPWMSetFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWMA_CallPWMSetFrequency &rArr; NPT_SetPWMFrequencies &rArr; PWM_SetFrequencies
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetPWMFrequencies
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(i.IB2D_SetParamCallback)
</UL>
<P><STRONG><a name="[7c]"></a>PWMA_IBus1TimerIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, pwm adapter.o(i.PWMA_IBus1TimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWMA_IBus1TimerIRQHandler &rArr; IB1DTIM_TimerIRQHandler &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_TimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(i.PWMA_Init)
</UL>
<P><STRONG><a name="[7a]"></a>PWMA_IBus2TimerIRQHandler</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, pwm adapter.o(i.PWMA_IBus2TimerIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PWMA_IBus2TimerIRQHandler &rArr; IB2DTIM_TimerIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DTIM_TimerIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(i.IB2DTIM_Init)
</UL>
<P><STRONG><a name="[172]"></a>PWMA_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, pwm adapter.o(i.PWMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PWMA_Init &rArr; IB1D_Init &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system.o(i.RTC_TAMP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_TAMP_IRQHandler &rArr; SYS_MediumPriorityIRQCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_MediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>SPI_Init</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, spi sx1280.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[166]"></a>SPI_SX1280_BusyIRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi sx1280.o(i.SPI_SX1280_BusyIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_SX1280_BusyIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>SPI_Transfer</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, spi sx1280.o(i.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback6
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback5
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback3
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TXCallback1
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback4
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback3
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback2
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_DIO1IRQHandlerCallback1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInitCallback2
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInitCallback1
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_ContinueResetAndInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ResumeRXCallback
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RXCallback4
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RXCallback3
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RXCallback2
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RXCallback1
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ResumeRX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
</UL>

<P><STRONG><a name="[11f]"></a>SPI_TransferWait</STRONG> (Thumb, 204 bytes, Stack size 12 bytes, spi sx1280.o(i.SPI_TransferWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_TransferWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetInstantRSSI
</UL>

<P><STRONG><a name="[bc]"></a>SYS_CalcChecksum16</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, system.o(i.SYS_CalcChecksum16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYS_CalcChecksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_BuildNextCommand
</UL>

<P><STRONG><a name="[121]"></a>SYS_DelayUs</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system.o(i.SYS_DelayUs))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Init
</UL>

<P><STRONG><a name="[da]"></a>SYS_DisableIRQs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(i.SYS_DisableIRQs))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_TriggerIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQCounter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFrequencies
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_FailsafeChanged
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetLastRXConditions
</UL>

<P><STRONG><a name="[db]"></a>SYS_EnableIRQs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(i.SYS_EnableIRQs))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_TriggerIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQCounter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SetFrequencies
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_FailsafeChanged
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetLastRXConditions
</UL>

<P><STRONG><a name="[17b]"></a>SYS_Init</STRONG> (Thumb, 496 bytes, Stack size 8 bytes, system.o(i.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYS_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[158]"></a>SYS_ResetToBootloader</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, system.o(i.SYS_ResetToBootloader))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[150]"></a>SYS_TriggerLowPriorityCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system.o(i.SYS_TriggerLowPriorityCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
</UL>

<P><STRONG><a name="[151]"></a>SYS_TriggerMediumPriorityCallback</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, system.o(i.SYS_TriggerMediumPriorityCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>

<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM15_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, npt timer.o(i.TIM15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM15_IRQHandler &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM16_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, npt timer.o(i.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM16_IRQHandler &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM17_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lnk timer.o(i.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM17_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, npt timer.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_CC_IRQHandler &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, npt timer.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM3_IRQHandler &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM6_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, system.o(i.TIM6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM6_IRQHandler &rArr; IB1D_MsIRQHandler &rArr; IB1DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_MsIRQHandler
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MsIRQHandler
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_MsIRQHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_MsIRQHandler
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_MsIRQHandler
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_MsIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart new port.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_TCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TCIRQHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RTOIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usart new port.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_TCIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TCIRQHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_RTOIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_4_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usart new port.o(i.USART3_4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_4_IRQHandler &rArr; USART_IDLEIRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_TCIRQHandler
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IDLEIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>USART_NPT_Deinit</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, usart new port.o(i.USART_NPT_Deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_NPT_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_SetUSARTConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Deinit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[c1]"></a>USART_NPT_GetNbReceivedBytes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usart new port.o(i.USART_NPT_GetNbReceivedBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_NPT_GetNbReceivedBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_MsIRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_DataReceivedCallback
</UL>

<P><STRONG><a name="[bf]"></a>USART_NPT_Init</STRONG> (Thumb, 980 bytes, Stack size 32 bytes, usart new port.o(i.USART_NPT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_NPT_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_Init
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_HubInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_Init
</UL>

<P><STRONG><a name="[c5]"></a>USART_NPT_ReceiveSetup</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, usart new port.o(i.USART_NPT_ReceiveSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveSetup
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_ReceiveSetup
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SendCommandCallback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveServoCallback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveSensorCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Init
</UL>

<P><STRONG><a name="[c6]"></a>USART_NPT_ReceiveStart</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart new port.o(i.USART_NPT_ReceiveStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_NPT_ReceiveStart
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveStart
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_ReceiveStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveServoCallback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ReceiveSensorCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_Init
</UL>

<P><STRONG><a name="[e6]"></a>USART_NPT_ReceiveStop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usart new port.o(i.USART_NPT_ReceiveStop))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_ReceiveStop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>USART_NPT_TransmitSetup</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, usart new port.o(i.USART_NPT_TransmitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_EnableIRQs
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_DisableIRQs
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_TransmitSetup
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_TransmitSetup
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SendChannelsCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetChannels
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_TransmitCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[d1]"></a>USART_NPT_TransmitStart</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart new port.o(i.USART_NPT_TransmitStart))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_TransmitStart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2DUSART_TransmitStart
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_TimerCompareIRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WS_TransmitCallback
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SB_TimerCompareCallback
</UL>

<P><STRONG><a name="[1a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, system.o(i.WWDG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WWDG_IRQHandler &rArr; SYS_LowPriorityIRQCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LowPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g070xx.o(RESET)
</UL>
<P><STRONG><a name="[168]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_GetInternalSensor
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_StatusChangedCallback
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_TriggerIRQ
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeInternal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQCounter
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_GetCounter
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
</UL>

<P><STRONG><a name="[9b]"></a>main</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = main &rArr; APP_SES_Run &rArr; SES_Run &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMA_Activate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_StartNewPort
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SES_Run
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadFactoryConfig
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_LoadConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Bind
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[17a]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, spi sx1280.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[16b]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lnk timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_Init
</UL>

<P><STRONG><a name="[154]"></a>APP_Background</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, main.o(i.APP_Background))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = APP_Background &rArr; SES_Test &rArr; TRA_Test &rArr; LNK_Test &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetToBootloader
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Test
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_IsWSIdle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SaveFactoryConfig
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>APP_Bind</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.APP_Bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = APP_Bind &rArr; SES_Bind &rArr; TRA_Bind &rArr; LNK_Bind &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Bind
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
</UL>

<P><STRONG><a name="[15a]"></a>APP_LoadConfig</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, main.o(i.APP_LoadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_LoadConfig &rArr; EEPROM_Read &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackPWMFrequencies
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>APP_LoadFactoryConfig</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, main.o(i.APP_LoadFactoryConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = APP_LoadFactoryConfig &rArr; EEPROM_Read &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Read
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>APP_SES_Run</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, main.o(i.APP_SES_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = APP_SES_Run &rArr; SES_Run &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_GetRFCycleTime
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_BindCallback
</UL>

<P><STRONG><a name="[156]"></a>APP_SaveFactoryConfig</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.APP_SaveFactoryConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = APP_SaveFactoryConfig &rArr; EEPROM_Write &rArr; I2C_Write &rArr; I2C_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_Write
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Background
</UL>

<P><STRONG><a name="[163]"></a>APP_StartNewPort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.APP_StartNewPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = APP_StartNewPort &rArr; NPT_Init &rArr; IB2_HubInit &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>LNK_FactorySaveConfigCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.LNK_FactorySaveConfigCallback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>SES_BindCallback</STRONG> (Thumb, 358 bytes, Stack size 8 bytes, main.o(i.SES_BindCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SES_BindCallback &rArr; APP_SES_Run &rArr; SES_Run &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackPWMFrequencies
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Idle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Factory
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SES_Run
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Bind
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[a]"></a>SES_BuildRealtimePacketCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.SES_BuildRealtimePacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SES_BuildRealtimePacketCallback &rArr; NPT_BuildRealtimePacketCallback &rArr; IB_BuildRealtimePacketCallback &rArr; IB2_GetNextSensor &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_BuildRealtimePacketCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>SES_CommandReceivedCallback</STRONG> (Thumb, 1738 bytes, Stack size 40 bytes, main.o(i.SES_CommandReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SES_CommandReceivedCallback &rArr; APP_Bind &rArr; SES_Bind &rArr; TRA_Bind &rArr; LNK_Bind &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackPWMFrequencies
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetWSUSARTConfig
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetPWMFrequencies
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_FailsafeChanged
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParam
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetParam
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetupServo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetParam
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetParam
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallbackNotSupported
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallbackInvalid
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Bind
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInternalVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetExternalVoltage
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>SES_CommandReceivedCallbackInvalid</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.SES_CommandReceivedCallbackInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SES_CommandReceivedCallbackInvalid &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[178]"></a>SES_CommandReceivedCallbackNotSupported</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(i.SES_CommandReceivedCallbackNotSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SES_CommandReceivedCallbackNotSupported &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_CommandReceivedCallback
</UL>

<P><STRONG><a name="[b]"></a>SES_HeartbeatCallback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i.SES_HeartbeatCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SES_HeartbeatCallback &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SES_PreSetChannelsCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(i.SES_PreSetChannelsCallback))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>SES_RealtimePacketReceivedCallback</STRONG> (Thumb, 410 bytes, Stack size 32 bytes, main.o(i.SES_RealtimePacketReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SES_RealtimePacketReceivedCallback &rArr; SES_SendCommand &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommand
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_StartDeinit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetPWMFrequencies
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_FailsafeChanged
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SES_SetChannelsCallback</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(i.SES_SetChannelsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SES_SetChannelsCallback &rArr; NPT_SetChannels &rArr; IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SES_HeartbeatCallback)
<LI> main.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>SES_WSDataReceivedCallback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.SES_WSDataReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SES_WSDataReceivedCallback &rArr; NPT_WSDataReceivedCallback &rArr; WS_SendData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_WSDataReceivedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[188]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, npt timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
</UL>

<P><STRONG><a name="[16d]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, npt timer.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
</UL>

<P><STRONG><a name="[85]"></a>IB2DTIM_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm adapter.o(i.IB2DTIM_Deinit))
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>IB2DTIM_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB2DTIM_Init &rArr; NPTTIM_EnableChannel &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_EnableChannel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>IB2DTIM_SetNextIRQTime</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DTIM_SetNextIRQTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IB2DTIM_SetNextIRQTime &rArr; NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>IB2DTIM_StartTimer</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DTIM_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB2DTIM_StartTimer &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>IB2DTIM_StopTimer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DTIM_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IB2DTIM_StopTimer &rArr; NPTTIM_FreezeCompareIRQ &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>IB2DUSART_Deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pwm adapter.o(i.IB2DUSART_Deinit))
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>IB2DUSART_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DUSART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IB2DUSART_Init &rArr; USART_NPT_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>IB2DUSART_ReceiveSetup</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, pwm adapter.o(i.IB2DUSART_ReceiveSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB2DUSART_ReceiveSetup &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>IB2DUSART_ReceiveStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DUSART_ReceiveStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IB2DUSART_ReceiveStart &rArr; USART_NPT_ReceiveStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>IB2DUSART_ReceiveStop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DUSART_ReceiveStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2DUSART_ReceiveStop
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>IB2DUSART_TransmitSetup</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pwm adapter.o(i.IB2DUSART_TransmitSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB2DUSART_TransmitSetup &rArr; USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>IB2DUSART_TransmitStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2DUSART_TransmitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2DUSART_TransmitStart
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>IB2D_GetParamCallback</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, pwm adapter.o(i.IB2D_GetParamCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IB2D_GetParamCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>IB2D_GetValueCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2D_GetValueCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2D_GetValueCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInternalVoltage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>IB2D_RequiredResourcesCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2D_RequiredResourcesCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2D_RequiredResourcesCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>IB2D_SetChannelsCallback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2D_SetChannelsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = IB2D_SetChannelsCallback &rArr; NPT_SetChannels &rArr; IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPT_SetChannels
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>IB2D_SetChannelsTypeCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2D_SetChannelsTypeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IB2D_SetChannelsTypeCallback &rArr; IB2D_SetFailsafeUnpack &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetFailsafeUnpack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>IB2D_SetFailsafeCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm adapter.o(i.IB2D_SetFailsafeCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = IB2D_SetFailsafeCallback &rArr; IB2D_SetFailsafeUnpack &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetFailsafeUnpack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>IB2D_SetFailsafeUnpack</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, pwm adapter.o(i.IB2D_SetFailsafeUnpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = IB2D_SetFailsafeUnpack &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetParamCallback
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetFailsafeCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetChannelsTypeCallback
</UL>

<P><STRONG><a name="[7f]"></a>IB2D_SetParamCallback</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, pwm adapter.o(i.IB2D_SetParamCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = IB2D_SetParamCallback &rArr; IB2D_SetFailsafeUnpack &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2D_SetFailsafeUnpack
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>IB2D_StatusChangedCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, pwm adapter.o(i.IB2D_StatusChangedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2D_StatusChangedCallback &rArr; LED_SetPattern &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_SetPattern
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm adapter.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[17e]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerMediumPriorityCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_TriggerLowPriorityCallback
</UL>

<P><STRONG><a name="[17c]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, system.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[185]"></a>USART_IDLEIRQHandler</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usart new port.o(i.USART_IDLEIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_IDLEIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>USART_RTOIRQHandler</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart new port.o(i.USART_RTOIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_RTOIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>USART_TCIRQHandler</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, usart new port.o(i.USART_TCIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_TCIRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_4_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[186]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usart new port.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Init
</UL>

<P><STRONG><a name="[5b]"></a>PHY_RXCallback1</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_RXCallback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_RXCallback1 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_RX)
</UL>
<P><STRONG><a name="[5c]"></a>PHY_RXCallback2</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_RXCallback2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_RXCallback2 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetAntenna
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_RXCallback1)
</UL>
<P><STRONG><a name="[5d]"></a>PHY_RXCallback3</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_RXCallback3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_RXCallback3 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_RXCallback2)
</UL>
<P><STRONG><a name="[5e]"></a>PHY_RXCallback4</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_RXCallback4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_RXCallback4 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_RXCallback3)
</UL>
<P><STRONG><a name="[5f]"></a>PHY_ResumeRXCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_ResumeRXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_ResumeRXCallback &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 3]<UL><LI> phy sx1280.o(.text.PHY_ResumeRX)
<LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2)
<LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback4)
</UL>
<P><STRONG><a name="[123]"></a>PHY_SX1280_ContinueResetAndInit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PHY_SX1280_ContinueResetAndInit &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_SetResetPin
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SX1280_IsBusy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
</UL>

<P><STRONG><a name="[61]"></a>PHY_SX1280_ContinueResetAndInitCallback1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_ContinueResetAndInitCallback1 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInit)
<LI> phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback1)
</UL>
<P><STRONG><a name="[60]"></a>PHY_SX1280_ContinueResetAndInitCallback2</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_ContinueResetAndInitCallback2 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInit)
</UL>
<P><STRONG><a name="[62]"></a>PHY_SX1280_ContinueResetAndInitCallback3</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback3))
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_ContinueResetAndInitCallback2)
</UL>
<P><STRONG><a name="[63]"></a>PHY_SX1280_DIO1IRQHandlerCallback1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_DIO1IRQHandlerCallback1 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandler)
</UL>
<P><STRONG><a name="[64]"></a>PHY_SX1280_DIO1IRQHandlerCallback2</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_DIO1IRQHandlerCallback2 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback1)
</UL>
<P><STRONG><a name="[65]"></a>PHY_SX1280_DIO1IRQHandlerCallback3</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_SX1280_DIO1IRQHandlerCallback3 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback2)
</UL>
<P><STRONG><a name="[66]"></a>PHY_SX1280_DIO1IRQHandlerCallback4</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_SX1280_DIO1IRQHandlerCallback4 &rArr; SYS_CalcCRC32Table
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC32Table
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_SX1280_DIO1IRQHandlerCallback3)
</UL>
<P><STRONG><a name="[12a]"></a>PHY_SetConfigCalcTXRXTime</STRONG> (Thumb, 636 bytes, Stack size 32 bytes, phy sx1280.o(.text.PHY_SetConfigCalcTXRXTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetConfig
</UL>

<P><STRONG><a name="[67]"></a>PHY_TXCallback1</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_TXCallback1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_TXCallback1 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_TX)
</UL>
<P><STRONG><a name="[68]"></a>PHY_TXCallback2</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, phy sx1280.o(.text.PHY_TXCallback2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PHY_TXCallback2 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetAttenuator
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_TXCallback1)
</UL>
<P><STRONG><a name="[69]"></a>PHY_TXCallback3</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_TXCallback3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_TXCallback3 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetAntenna
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_TXCallback2)
</UL>
<P><STRONG><a name="[6a]"></a>PHY_TXCallback4</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_TXCallback4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_TXCallback4 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_TXCallback3)
</UL>
<P><STRONG><a name="[6c]"></a>PHY_TXCallback5</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_TXCallback5))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_TXCallback5 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> phy sx1280.o(.text.PHY_TXCallback4)
</UL>
<P><STRONG><a name="[6b]"></a>PHY_TXCallback6</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, phy sx1280.o(.text.PHY_TXCallback6))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PHY_TXCallback6 &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_SetPAMode
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> phy sx1280.o(.text.PHY_TXCallback4)
<LI> phy sx1280.o(.text.PHY_TXCallback5)
</UL>
<P><STRONG><a name="[58]"></a>LNKTIM_TimerCompareIRQHandler</STRONG> (Thumb, 2820 bytes, Stack size 56 bytes, lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LNKTIM_TimerCompareIRQHandler &rArr; PHY_TX &rArr; PHY_SX1280_ContinueResetAndInit &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTime
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TimerCompareIRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_TX
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_RX
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNK_Init)
</UL>
<P><STRONG><a name="[55]"></a>LNK_BuildTXPacketCallback</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lnk afhds3 receiver.o(.text.LNK_BuildTXPacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LNK_BuildTXPacketCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
<LI> lnk afhds3 receiver.o(.text.LNK_CallBuildTXPacketCallback)
</UL>
<P><STRONG><a name="[4e]"></a>LNK_CallBlackBoxRXCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_CallBlackBoxRXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LNK_CallBlackBoxRXCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
<LI> lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
</UL>
<P><STRONG><a name="[57]"></a>LNK_CallBlackBoxTXCallback</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_CallBlackBoxTXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LNK_CallBlackBoxTXCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[56]"></a>LNK_CallBuildTXPacketCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_CallBuildTXPacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LNK_CallBuildTXPacketCallback &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[53]"></a>LNK_CallHeartbeatCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_CallHeartbeatCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LNK_CallHeartbeatCallback &rArr; SYS_QueueLowPriorityIRQCallbackLast &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[51]"></a>LNK_CallSuccessfullyBound</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lnk afhds3 receiver.o(.text.LNK_CallSuccessfullyBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LNK_CallSuccessfullyBound &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[52]"></a>LNK_FactoryMeasureRSSICallback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lnk afhds3 receiver.o(.text.LNK_FactoryMeasureRSSICallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LNK_FactoryMeasureRSSICallback &rArr; PHY_GetInstantRSSI &rArr; SPI_TransferWait
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetInstantRSSI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[4d]"></a>LNK_HeartbeatCallback</STRONG> (Thumb, 852 bytes, Stack size 32 bytes, lnk afhds3 receiver.o(.text.LNK_HeartbeatCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LNK_HeartbeatCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
<LI> lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
<LI> lnk afhds3 receiver.o(.text.LNK_CallHeartbeatCallback)
</UL>
<P><STRONG><a name="[54]"></a>LNK_PacketReceivedCallbackBind</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LNK_PacketReceivedCallbackBind &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeFromMarker
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ResumeRX
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[4c]"></a>LNK_PacketReceivedCallbackFactory</STRONG> (Thumb, 564 bytes, Stack size 24 bytes, lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LNK_PacketReceivedCallbackFactory &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeFromMarker
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetInternalVoltage
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetExternalVoltage
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[50]"></a>LNK_PacketReceivedCallbackRun</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LNK_PacketReceivedCallbackRun &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_SetNextCompareIRQTimeFromMarker
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallbackLast
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_ResumeRX
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[59]"></a>LNK_ProcessRXPacketBindCallback</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, lnk afhds3 receiver.o(.text.LNK_ProcessRXPacketBindCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LNK_ProcessRXPacketBindCallback &rArr; LNK_SaveBoundConfig &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StopTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_StartTimer
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_SaveBoundConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_Stop
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackBind)
</UL>
<P><STRONG><a name="[5a]"></a>LNK_ProcessRXPacketRunCallback</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lnk afhds3 receiver.o(.text.LNK_ProcessRXPacketRunCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LNK_ProcessRXPacketRunCallback &rArr; PHY_GetLastRXConditions
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_GetLastRXConditions
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNK_PacketReceivedCallbackRun)
</UL>
<P><STRONG><a name="[100]"></a>LNK_SaveBoundConfig</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, lnk afhds3 receiver.o(.text.LNK_SaveBoundConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LNK_SaveBoundConfig &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_ProcessRXPacketBindCallback
</UL>

<P><STRONG><a name="[4f]"></a>LNK_SynchronizationLostCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lnk afhds3 receiver.o(.text.LNK_SynchronizationLostCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LNK_SynchronizationLostCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lnk afhds3 receiver.o(.text.LNKTIM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[13d]"></a>SES_ProcessCommand</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, ses afhds3.o(.text.SES_ProcessCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SES_ProcessCommand &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackOneChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SetAntenna
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_SetRFPower
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_GetRFPower
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_WSDataReceivedCallback
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendCommandCallback
</UL>

<P><STRONG><a name="[145]"></a>SES_Run2</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, ses afhds3.o(.text.SES_Run2))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackOneChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Stop
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_GetRFCycleTime
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_BindCallback
</UL>

<P><STRONG><a name="[74]"></a>SES_SendCommandCallback</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ses afhds3.o(.text.SES_SendCommandCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SES_SendCommandCallback &rArr; SES_ProcessCommand &rArr; SES_UnpackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.text.SES_SendCommand)
</UL>
<P><STRONG><a name="[14b]"></a>SES_SetChannels</STRONG> (Thumb, 240 bytes, Stack size 128 bytes, ses afhds3.o(.text.SES_SetChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SES_SetChannels &rArr; SES_PackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_GetLastRXConditions
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackOneChannel
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackChannels
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_RealtimePacketReceivedCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_HeartbeatCallback
</UL>

<P><STRONG><a name="[73]"></a>TRA_BindCallback</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, ses afhds3.o(.text.TRA_BindCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TRA_BindCallback &rArr; SES_Run2 &rArr; TRA_Run &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackOneChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_Run2
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.text.SES_Bind)
</UL>
<P><STRONG><a name="[f]"></a>TRA_BuildRealtimePacketCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ses afhds3.o(.text.TRA_BuildRealtimePacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRA_BuildRealtimePacketCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.data.SES_TransportRunUp)
</UL>
<P><STRONG><a name="[10]"></a>TRA_HeartbeatCallback</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ses afhds3.o(.text.TRA_HeartbeatCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TRA_HeartbeatCallback &rArr; SES_SetChannels &rArr; SES_PackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.data.SES_TransportRunUp)
</UL>
<P><STRONG><a name="[d]"></a>TRA_RealtimePacketReceivedCallback</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, ses afhds3.o(.text.TRA_RealtimePacketReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TRA_RealtimePacketReceivedCallback &rArr; SES_SetChannels &rArr; SES_PackChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_PackOneChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_UnpackChannels
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Idle
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SetChannels
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.data.SES_TransportRunUp)
</UL>
<P><STRONG><a name="[e]"></a>TRA_WSDataReceivedCallback</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, ses afhds3.o(.text.TRA_WSDataReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TRA_WSDataReceivedCallback &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendResponse
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_ProcessCommand
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ses afhds3.o(.data.SES_TransportRunUp)
</UL>
<P><STRONG><a name="[37]"></a>IB1D_CommandReceivedCallback</STRONG> (Thumb, 1064 bytes, Stack size 64 bytes, i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = IB1D_CommandReceivedCallback &rArr; IB1D_ServoOutCallback &rArr; NPT_SetChannels &rArr; IB2_SetChannels &rArr; NPT_GetInternalSensor &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_SetParamCallback
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_SetBufferState
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_ServoOutCallback
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_GetValueCallback
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1D_GetParamCallback
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_TransmitSetup
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveStart
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DUSART_ReceiveSetup
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StopTimer
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1DTIM_StartTimer
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 4]<UL><LI> i-bus 1 device library.o(.text.IB1DTIM_TimerIRQHandler)
<LI> i-bus 1 device library.o(.text.IB1D_MsIRQHandler)
<LI> i-bus 1 device library.o(.text.IB1D_Init)
<LI> i-bus 1 device library.o(.text.IB1D_CommandReceivedCallback)
</UL>
<P><STRONG><a name="[41]"></a>IB2D_ProcessChannelsCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2D_ProcessChannelsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2D_ProcessChannelsCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
</UL>
<P><STRONG><a name="[3f]"></a>IB2D_ReceiveChannelsCallback</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2D_ReceiveChannelsCallback &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 4]<UL><LI> i-bus 2 device library.o(.text.IB2D_RestartChannelsReceptionCallback)
<LI> i-bus 2 device library.o(.text.IB2D_Init)
<LI> i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
<LI> i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallbackMedium)
</UL>
<P><STRONG><a name="[40]"></a>IB2D_ReceiveChannelsCallbackMedium</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = IB2D_ReceiveChannelsCallbackMedium &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallback)
</UL>
<P><STRONG><a name="[42]"></a>IB2D_ReceiveCommandCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2D_ReceiveCommandCallback &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i-bus 2 device library.o(.text.IB2D_ReceiveChannelsCallbackMedium)
</UL>
<P><STRONG><a name="[43]"></a>IB2D_ReceiveCommandCallbackMedium</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallbackMedium))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2D_ReceiveCommandCallbackMedium &rArr; SYS_CalcCRC8Table
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i-bus 2 device library.o(.text.IB2D_ReceiveCommandCallback)
</UL>
<P><STRONG><a name="[3e]"></a>IB2D_RestartChannelsReceptionCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, i-bus 2 device library.o(.text.IB2D_RestartChannelsReceptionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IB2D_RestartChannelsReceptionCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i-bus 2 device library.o(.text.IB2DTIM_TimerIRQHandler)
</UL>
<P><STRONG><a name="[bb]"></a>IB1_BuildNextCommand</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_BuildNextCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IB1_BuildNextCommand &rArr; SYS_CalcChecksum16
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcChecksum16
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
</UL>

<P><STRONG><a name="[c0]"></a>IB1_ProcessLastResponse</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, npt i-bus 1.o(.text.IB1_ProcessLastResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = IB1_ProcessLastResponse &rArr; IB1_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_SetParamResponse
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_GetParamResponse
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_GetNbReceivedBytes
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcChecksum16
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_ResetSensors
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_TimerCompareCallback
</UL>

<P><STRONG><a name="[38]"></a>IB1_ReceiveSensorCallback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_ReceiveSensorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB1_ReceiveSensorCallback &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_ReceiveSensorIRQHandler)
</UL>
<P><STRONG><a name="[3c]"></a>IB1_ReceiveSensorIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt i-bus 1.o(.text.IB1_ReceiveSensorIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB1_ReceiveSensorIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_TimerCompareCallback)
</UL>
<P><STRONG><a name="[39]"></a>IB1_ReceiveServoCallback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_ReceiveServoCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB1_ReceiveServoCallback &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_ReceiveServoIRQHandler)
</UL>
<P><STRONG><a name="[3b]"></a>IB1_ReceiveServoIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt i-bus 1.o(.text.IB1_ReceiveServoIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB1_ReceiveServoIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_TimerCompareCallback)
</UL>
<P><STRONG><a name="[3d]"></a>IB1_TimerCompareCallback</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, npt i-bus 1.o(.text.IB1_TimerCompareCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = IB1_TimerCompareCallback &rArr; IB1_ProcessLastResponse &rArr; IB1_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNKTIM_GetCounter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_ProcessLastResponse
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB1_BuildNextCommand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[3a]"></a>IB1_TimerCompareIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt i-bus 1.o(.text.IB1_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB1_TimerCompareIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallbackLast &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 1.o(.text.IB1_SetChannels)
</UL>
<P><STRONG><a name="[46]"></a>IB2_CallGetParamResponseCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, npt i-bus 2.o(.text.IB2_CallGetParamResponseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IB2_CallGetParamResponseCallback &rArr; IB2_GetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_GetParamResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback)
</UL>
<P><STRONG><a name="[45]"></a>IB2_CallSetParamResponseCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, npt i-bus 2.o(.text.IB2_CallSetParamResponseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = IB2_CallSetParamResponseCallback &rArr; IB2_SetParamResponse &rArr; SES_SendResponse &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_SetParamResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback)
</UL>
<P><STRONG><a name="[4b]"></a>IB2_ProcessLastResponseCallback</STRONG> (Thumb, 820 bytes, Stack size 16 bytes, npt i-bus 2.o(.text.IB2_ProcessLastResponseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB2_ProcessLastResponseCallback &rArr; IB2_ReassignValueBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_CalcCRC8Table
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_GetNbReceivedBytes
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ReassignValueBuffer
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB_ResetSensors
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[e0]"></a>IB2_ReassignValueBuffer</STRONG> (Thumb, 500 bytes, Stack size 56 bytes, npt i-bus 2.o(.text.IB2_ReassignValueBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB2_ReassignValueBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IB2_ProcessLastResponseCallback
</UL>

<P><STRONG><a name="[48]"></a>IB2_SendChannelsCallback</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, npt i-bus 2.o(.text.IB2_SendChannelsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IB2_SendChannelsCallback &rArr; USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_SendChannelsIRQHandler)
</UL>
<P><STRONG><a name="[4a]"></a>IB2_SendChannelsIRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, npt i-bus 2.o(.text.IB2_SendChannelsIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IB2_SendChannelsIRQHandler &rArr; NPTTIM_SetNextCompareIRQTimeFromNow &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTimeFromNow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_SetChannels)
</UL>
<P><STRONG><a name="[49]"></a>IB2_SendCommandCallback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, npt i-bus 2.o(.text.IB2_SendCommandCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB2_SendCommandCallback &rArr; USART_NPT_ReceiveSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_SendCommandIRQHandler)
</UL>
<P><STRONG><a name="[47]"></a>IB2_SendCommandIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt i-bus 2.o(.text.IB2_SendCommandIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IB2_SendCommandIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallback &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt i-bus 2.o(.text.IB2_SendChannelsCallback)
</UL>
<P><STRONG><a name="[44]"></a>IB2_TimerCompareIRQHandler</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, npt i-bus 2.o(.text.IB2_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IB2_TimerCompareIRQHandler &rArr; NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStop
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_ReceiveStart
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
</UL>
<BR>[Address Reference Count : 2]<UL><LI> npt i-bus 2.o(.text.IB2_HubInit)
<LI> npt i-bus 2.o(.text.IB2_Init)
</UL>
<P><STRONG><a name="[75]"></a>LNK_BindCallback</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tra afhds3.o(.text.LNK_BindCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LNK_BindCallback &rArr; TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra afhds3.o(.text.TRA_Bind)
</UL>
<P><STRONG><a name="[12]"></a>LNK_BuildTXPacketCallback</STRONG> (Thumb, 940 bytes, Stack size 56 bytes, tra afhds3.o(.text.LNK_BuildTXPacketCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LNK_BuildTXPacketCallback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra afhds3.o(.data.TRA_LinkRunUp)
</UL>
<P><STRONG><a name="[13]"></a>LNK_HeartbeatCallback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, tra afhds3.o(.text.LNK_HeartbeatCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LNK_HeartbeatCallback &rArr; LNK_Idle &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra afhds3.o(.data.TRA_LinkRunUp)
</UL>
<P><STRONG><a name="[11]"></a>LNK_PacketReceivedCallback</STRONG> (Thumb, 644 bytes, Stack size 40 bytes, tra afhds3.o(.text.LNK_PacketReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LNK_PacketReceivedCallback &rArr; LNK_Idle &rArr; PHY_Stop &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Idle
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallbackStoreWSStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra afhds3.o(.data.TRA_LinkRunUp)
</UL>
<P><STRONG><a name="[fb]"></a>LNK_PacketReceivedCallbackStoreWSStatus</STRONG> (Thumb, 288 bytes, Stack size 28 bytes, tra afhds3.o(.text.LNK_PacketReceivedCallbackStoreWSStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LNK_PacketReceivedCallbackStoreWSStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_PacketReceivedCallback
</UL>

<P><STRONG><a name="[f3]"></a>TRA_Run2</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, tra afhds3.o(.text.TRA_Run2))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TRA_Run2 &rArr; LNK_Run &rArr; PHY_SetConfig &rArr; PHY_SetConfigCalcTXRXTime
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Stop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_Run
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_Run
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LNK_BindCallback
</UL>

<P><STRONG><a name="[76]"></a>TRA_SendWSDataCallback</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tra afhds3.o(.text.TRA_SendWSDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TRA_SendWSDataCallback &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRA_SendWSData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tra afhds3.o(.text.TRA_SendWSData)
</UL>
<P><STRONG><a name="[72]"></a>SB_TimerCompareCallback</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, npt s-bus.o(.text.SB_TimerCompareCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SB_TimerCompareCallback &rArr; USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_Deinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_DisableChannel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt s-bus.o(.text.SB_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[71]"></a>SB_TimerCompareIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt s-bus.o(.text.SB_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SB_TimerCompareIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallbackLast &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt s-bus.o(.text.SB_SetChannels)
</UL>
<P><STRONG><a name="[77]"></a>WS_DataReceivedCallback</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, npt ws.o(.text.WS_DataReceivedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = WS_DataReceivedCallback &rArr; SES_SendWSData &rArr; TRA_SendWSData &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_GetNbReceivedBytes
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SES_SendWSData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt ws.o(.text.WS_MsIRQHandler)
</UL>
<P><STRONG><a name="[78]"></a>WS_TransmitCallback</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, npt ws.o(.text.WS_TransmitCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WS_TransmitCallback &rArr; USART_NPT_TransmitSetup
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitStart
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_NPT_TransmitSetup
</UL>
<BR>[Address Reference Count : 2]<UL><LI> npt ws.o(.text.WS_SendData)
<LI> npt ws.o(.text.WS_TransmitIRQHandler)
</UL>
<P><STRONG><a name="[79]"></a>WS_TransmitIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt ws.o(.text.WS_TransmitIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WS_TransmitIRQHandler &rArr; SYS_QueueLowPriorityIRQCallback &rArr; SYS_TriggerLowPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueLowPriorityIRQCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt ws.o(.text.WS_TransmitCallback)
</UL>
<P><STRONG><a name="[6e]"></a>PPM_TimerCompareCallback</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, npt ppm.o(.text.PPM_TimerCompareCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PPM_TimerCompareCallback &rArr; NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt ppm.o(.text.PPM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[6d]"></a>PPM_TimerCompareIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt ppm.o(.text.PPM_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PPM_TimerCompareIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallbackLast &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt ppm.o(.text.PPM_Init)
</UL>
<P><STRONG><a name="[70]"></a>PWM_TimerCompareCallback</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, npt pwm.o(.text.PWM_TimerCompareCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWM_TimerCompareCallback &rArr; NPTTIM_SetNextCompareIRQTime &rArr; NPTTIM_SetNextCompareIRQTimeInternal &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_SetNextCompareIRQTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NPTTIM_FreezeCompareIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt pwm.o(.text.PWM_TimerCompareIRQHandler)
</UL>
<P><STRONG><a name="[6f]"></a>PWM_TimerCompareIRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, npt pwm.o(.text.PWM_TimerCompareIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM_TimerCompareIRQHandler &rArr; SYS_QueueMediumPriorityIRQCallbackLast &rArr; SYS_TriggerMediumPriorityCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_QueueMediumPriorityIRQCallbackLast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> npt pwm.o(.text.PWM_Init)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[a9]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
